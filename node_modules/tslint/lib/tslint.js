"use strict";
var configuration_1 = require("./configuration");
var MultiLinter = require("./tslintMulti");
var utils_1 = require("./utils");
var Linter = (function () {
    function Linter(fileName, source, options, program) {
        this.fileName = fileName;
        this.source = source;
        this.program = program;
        this.options = this.computeFullOptions(options);
    }
    Linter.createProgram = function (configFile, projectDirectory) {
        return MultiLinter.createProgram(configFile, projectDirectory);
    };
    Linter.getFileNames = function (program) {
        return MultiLinter.getFileNames(program);
    };
    Linter.prototype.lint = function () {
        var multiLinter = new MultiLinter(this.options, this.program);
        multiLinter.lint(this.fileName, this.source, this.options.configuration);
        return multiLinter.getResult();
    };
    Linter.prototype.computeFullOptions = function (options) {
        if (options === void 0) { options = {}; }
        if (typeof options !== "object") {
            throw new Error("Unknown Linter options type: " + typeof options);
        }
        var configuration = options.configuration, formatter = options.formatter, formattersDirectory = options.formattersDirectory, rulesDirectory = options.rulesDirectory;
        return {
            configuration: configuration || configuration_1.DEFAULT_CONFIG,
            formatter: formatter || "prose",
            formattersDirectory: formattersDirectory,
            rulesDirectory: utils_1.arrayify(rulesDirectory).concat(utils_1.arrayify(configuration.rulesDirectory)),
        };
    };
    Linter.VERSION = MultiLinter.VERSION;
    Linter.findConfiguration = configuration_1.findConfiguration;
    Linter.findConfigurationPath = configuration_1.findConfigurationPath;
    Linter.getRulesDirectories = configuration_1.getRulesDirectories;
    Linter.loadConfigurationFromPath = configuration_1.loadConfigurationFromPath;
    return Linter;
}());
module.exports = Linter;
